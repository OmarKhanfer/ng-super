import { Injectable } from "@angular/core";
import { Effect, Actions, ofType,createEffect } from '@ngrx/effects';
import { Store } from '@ngrx/store';
import { of } from 'rxjs';
import { map, switchMap, catchError, withLatestFrom, tap} from 'rxjs/operators';
import * as <%=camelize(name)%>Actions from './<%=name%>.actions';
import { <%=classify(name)%>State } from './<%=name%>.state';
import { <%=classify(name)%>Service } from '../services/<%=name%>.service';
@Injectable({
  providedIn: 'root'
})
export class <%=camelize(name)%>Effects {
  constructor(
    private actions$: Actions,
    private store: Store<<%=classify(name)%>State>,
    private service: <%=classify(name)%>Service) {

  }

  query<%=classify(name)%>List$ =  createEffect(() => this.actions$.pipe(
    ofType(<%=camelize(name)%>Actions.<%=camelize(name)%>ListRequestAction),
    switchMap((req: any) => {
      return this.service.get<%=classify(name)%>sList().pipe(
        map((resp: any) => <%=camelize(name)%>Actions.<%=camelize(name)%>ListSuccessAction(resp))
      );
    }),
    catchError((resp: any) => of(<%=camelize(name)%>Actions.<%=camelize(name)%>ListFailedAction(resp))))
  );

 query<%=classify(name)%>Details$ = createEffect(() => this.actions$.pipe(
    ofType(<%=camelize(name)%>Actions.<%=camelize(name)%>DetailsRequestAction),
    switchMap((req: any) => {
      return this.service.get<%=classify(name)%>sList().pipe(
        map((resp: any) => <%=camelize(name)%>Actions.<%=camelize(name)%>DetailsSuccessAction(resp))
      );
    }),
    catchError((resp: any) => of(<%=camelize(name)%>Actions.<%=camelize(name)%>DetailsFailedAction(resp))))
  );


  delete<%=classify(name)%>$ = createEffect(() => this.actions$.pipe(
    ofType(<%=camelize(name)%>Actions.<%=camelize(name)%>DeleteRequestAction),
    switchMap((req: any) => {
      return this.service.delete<%=classify(name)%>(req.id).pipe(
        map((resp: any) => <%=camelize(name)%>Actions.<%=camelize(name)%>DeleteSuccessAction(resp))
      );
    }),
    catchError((resp: any) => of(<%=camelize(name)%>Actions.<%=camelize(name)%>DeleteFailedAction(resp.error))))
  );

  save<%=classify(name)%>$ = createEffect(() => this.actions$.pipe(
    ofType(<%=camelize(name)%>Actions.<%=camelize(name)%>CreateRequestAction),
    switchMap((req: any) => {
      return this.service.save<%=classify(name)%>(req.payload).pipe(
        map((resp: any) => <%=camelize(name)%>Actions.<%=camelize(name)%>CreateSuccessAction)
      );
    }),
    catchError((resp: any) => of(<%=camelize(name)%>Actions.<%=camelize(name)%>CreateFailedAction(resp.error))))
  );

  update<%=classify(name)%>$ =  createEffect(() => this.actions$.pipe(
    ofType(<%=camelize(name)%>Actions.<%=camelize(name)%>UpdateRequestAction),
    switchMap((req: any) => {
      return this.service.save<%=classify(name)%>(req.payload).pipe(
        map((resp: any) => <%=camelize(name)%>Actions.<%=camelize(name)%>UpdateSuccessAction(resp))
      );
    }),
    catchError((resp: any) => of(<%=camelize(name)%>Actions.<%=camelize(name)%>UpdateFailedAction(resp.error))))
  );

  filter<%=classify(name)%>List$ = createEffect(() => this.actions$.pipe(
    ofType(<%=camelize(name)%>Actions.<%=camelize(name)%>FilterRequestAction),
    switchMap((req: any) => of(<%=camelize(name)%>Actions.<%=camelize(name)%>FilterSuccessAction(req.filter))),
    catchError((resp: any) => of(<%=camelize(name)%>Actions.<%=camelize(name)%>FilterFailedAction(resp.error))))
  );

  sort<%=classify(name)%>List$ = createEffect(() => this.actions$.pipe(
    ofType(<%=camelize(name)%>Actions.<%=camelize(name)%>SortingRequestAction),
    switchMap((req: any) => of(<%=camelize(name)%>Actions.<%=camelize(name)%>SortingSuccessAction(req.sorting))),
    catchError((resp: any) => of(<%=camelize(name)%>Actions.<%=camelize(name)%>SortingFailedAction(resp.error))))
  );
}
