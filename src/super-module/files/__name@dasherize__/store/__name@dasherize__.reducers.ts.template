import { initial<%=classify(name)%>State, <%=classify(name)%>State } from './<%=name%>.state';
import * as <%=camelize(name)%>Actions from './<%=name%>.actions';
import { Action,createReducer, on } from '@ngrx/store';

const <%=camelize(name)%>ReducersCases =  createReducer(
  initial<%=classify(name)%>State,

  //#region <%=classify(name)%> List Case
  on(<%=camelize(name)%>Actions.<%=camelize(name)%>ListRequestAction, state => ({ ...state })),
  on(<%=camelize(name)%>Actions.<%=camelize(name)%>ListSuccessAction, (state,resp) => ({ ...state, <%=camelize(name)%>List:resp.response, errors:null })),
  on(<%=camelize(name)%>Actions.<%=camelize(name)%>ListFailedAction, (state,resp) => ({ ...state,errors:resp.error })),
  //#endregion

  //#region <%=classify(name)%> Details Case
  on(<%=camelize(name)%>Actions.<%=camelize(name)%>DetailsRequestAction, state => ({ ...state })),
  on(<%=camelize(name)%>Actions.<%=camelize(name)%>DetailsSuccessAction, (state,resp) => ({ ...state, <%=camelize(name)%>Details:resp.response, errors:null })),
  on(<%=camelize(name)%>Actions.<%=camelize(name)%>DetailsFailedAction , (state,resp) => ({ ...state,errors:resp.error })),
  //#endregion

  //#region <%=classify(name)%> Delete Case
  on(<%=camelize(name)%>Actions.<%=camelize(name)%>DeleteRequestAction, state => ({ ...state })),
  on(<%=camelize(name)%>Actions.<%=camelize(name)%>DeleteSuccessAction, (state,resp) => ({ ...state, errors:null })),
  on(<%=camelize(name)%>Actions.<%=camelize(name)%>DeleteFailedAction , (state,resp) => ({ ...state,errors:resp.error })),
  //#endregion

  //#region <%=classify(name)%> Create Case
  on(<%=camelize(name)%>Actions.<%=camelize(name)%>CreateRequestAction, state => ({ ...state })),
  on(<%=camelize(name)%>Actions.<%=camelize(name)%>CreateSuccessAction, (state,resp) => ({ ...state, errors:null })),
  on(<%=camelize(name)%>Actions.<%=camelize(name)%>CreateFailedAction , (state,resp) => ({ ...state,errors:resp.error })),
  //#endregion

  //#region <%=classify(name)%> Update Case
  on(<%=camelize(name)%>Actions.<%=camelize(name)%>UpdateRequestAction, state => ({ ...state })),
  on(<%=camelize(name)%>Actions.<%=camelize(name)%>UpdateSuccessAction, (state,resp) => ({ ...state, errors:null })),
  on(<%=camelize(name)%>Actions.<%=camelize(name)%>UpdateFailedAction , (state,resp) => ({ ...state,errors:resp.error })),
  //#endregion

  //#region <%=classify(name)%> Filter Case
  on(<%=camelize(name)%>Actions.<%=camelize(name)%>FilterRequestAction, state => ({ ...state })),
  on(<%=camelize(name)%>Actions.<%=camelize(name)%>FilterSuccessAction, (state,resp) => ({ ...state, filters:resp.filter, errors:null })),
  on(<%=camelize(name)%>Actions.<%=camelize(name)%>FilterFailedAction , (state,resp) => ({ ...state,errors:resp.error })),
  //#endregion

  //#region <%=classify(name)%> Sorting Case
  on(<%=camelize(name)%>Actions.<%=camelize(name)%>SortingRequestAction, state => ({ ...state })),
  on(<%=camelize(name)%>Actions.<%=camelize(name)%>SortingSuccessAction, (state,resp) => ({ ...state, sorting:resp.sorting, errors:null })),
  on(<%=camelize(name)%>Actions.<%=camelize(name)%>SortingFailedAction , (state,resp) => ({ ...state,errors:resp.error })),
  //#endregion
);

export function <%=camelize(name)%>Reducer(state: <%=classify(name)%>State | undefined, action: Action) {
  return <%=camelize(name)%>ReducersCases(state, action);
}